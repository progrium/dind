#!/bin/bash

CGROUP=/sys/fs/cgroup
mkdir -p $CGROUP
if ! mountpoint -q $CGROUP; then
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP || {
		echo "Could not make a tmpfs mount. Did you use --privileged?"
		exit 1
	}
fi

if [[ -d /sys/kernel/security ]] && ! mountpoint -q /sys/kernel/security; then
  mount -t securityfs none /sys/kernel/security || {
    echo "Could not mount /sys/kernel/security."
    echo "AppArmor detection and --privileged mode might break."
  }
fi

for SUBSYS in $(cut -d: -f2 /proc/1/cgroup); do
  mkdir -p $CGROUP/$SUBSYS
  if ! mountpoint -q $CGROUP/$SUBSYS; then
    mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
  fi

  echo $SUBSYS | grep -q ^name= && {
    NAME=$(echo $SUBSYS | sed s/^name=//)
    ln -s $SUBSYS $CGROUP/$NAME
  }

  [[ $SUBSYS = cpuacct,cpu ]] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
done

grep -q :devices: /proc/1/cgroup ||
	echo "WARNING: the 'devices' cgroup should be in its own hierarchy."
grep -qw devices /proc/1/cgroup ||
	echo "WARNING: it looks like the 'devices' cgroup is not mounted."

pushd /proc/self/fd >/dev/null
for FD in *; do
	case "$FD" in
	[012]) ;;
	*) eval exec "$FD>&-" ;;
	esac
done
popd >/dev/null

rm -rf /var/run/docker.pid
exec docker -d $DOCKER_OPTS $@
